// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhoneStoreBackEnd.Data.Contexts;

namespace PhoneStoreBackEnd.Migrations
{
    [DbContext(typeof(PhoneStoreContext))]
    [Migration("20201012045838_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PhoneStoreBackEnd.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Phones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/220522/Feature/samsung-galaxy-note-20-ultra-spec-fixed-720x333.jpg",
                            Name = "Samsung Galaxy Note 20 Ultra",
                            Price = 29990000.0m
                        },
                        new
                        {
                            Id = 2,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/229056/oppo-a93-230520-060532-200x200.jpg",
                            Name = "OPPO A93",
                            Price = 7490000.0m
                        },
                        new
                        {
                            Id = 3,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/153856/iphone-11-red-400x400.jpg",
                            Name = "iPhone 11 64GB",
                            Price = 19990000.0m
                        },
                        new
                        {
                            Id = 4,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/217308/xiaomi-redmi-9-114620-094644-400x400.jpg",
                            Name = "Xiaomi Redmi 9 (4GB/64GB)",
                            Price = 3590000.0m
                        },
                        new
                        {
                            Id = 5,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/220654/Feature/1602154414868-720x333.png",
                            Name = "OPPO A92",
                            Price = 5940000.0m
                        },
                        new
                        {
                            Id = 6,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/219314/samsung-galaxy-a21s-055620-045659-400x400.jpg",
                            Name = "Samsung Galaxy A21s (6GB/64GB)",
                            Price = 4830000.0m
                        },
                        new
                        {
                            Id = 7,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/227689/realme-7-pro-043220-013244-400x400.jpg",
                            Name = "Realme 7 Pro",
                            Price = 8490000.0m
                        },
                        new
                        {
                            Id = 8,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/228888/vsmart-joy-4-4gb-64gb-171020-021003-400x400.jpg",
                            Name = "Vsmart Joy 4 (4GB/64GB)",
                            Price = 3590000.0m
                        },
                        new
                        {
                            Id = 9,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/226099/samsung-galaxy-z-fold-2-061220-021232-200x200.jpg",
                            Name = "Samsung Galaxy Z Fold2 5G",
                            Price = 50000000.0m
                        },
                        new
                        {
                            Id = 10,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/210654/iphone-11-pro-max-512gb-gold-400x400.jpg",
                            Name = "iPhone 11 Pro Max 512GB",
                            Price = 38990000.0m
                        },
                        new
                        {
                            Id = 11,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/213022/samsung-galaxy-z-flip-den-600x600-400x400.jpg",
                            Name = "Samsung Galaxy Z Flip",
                            Price = 36000000.0m
                        },
                        new
                        {
                            Id = 12,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/210653/iphone-11-pro-max-256gb-black-400x400.jpg",
                            Name = "iPhone 11 Pro Max 256GB",
                            Price = 34990000.0m
                        },
                        new
                        {
                            Id = 13,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/225063/samsung-galaxy-note-20-ultra-5g-063420-123447-400x400.jpg",
                            Name = "Samsung Galaxy Note 20 Ultra 5G",
                            Price = 32990000.0m
                        },
                        new
                        {
                            Id = 14,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/210655/iphone-11-pro-256gb-black-400x400.jpg",
                            Name = "iPhone 11 Pro 256GB",
                            Price = 31990000.0m
                        },
                        new
                        {
                            Id = 15,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/200533/iphone-11-pro-max-green-400x400.jpg",
                            Name = "iPhone 11 Pro Max 64GB",
                            Price = 30990000.0m
                        },
                        new
                        {
                            Id = 16,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/188705/iphone-11-pro-black-400x400.jpg",
                            Name = "iPhone 11 Pro 64GB",
                            Price = 27990000.0m
                        },
                        new
                        {
                            Id = 17,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/210648/iphone-11-256gb-black-400x400.jpg",
                            Name = "iPhone 11 256GB",
                            Price = 23990000.0m
                        },
                        new
                        {
                            Id = 18,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/217936/samsung-galaxy-s20-plus-600x600-fix-400x400.jpg",
                            Name = "Samsung Galaxy S20+",
                            Price = 16990000.0m
                        },
                        new
                        {
                            Id = 19,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/218355/samsung-galaxy-note-20-062220-122200-400x400.jpg",
                            Name = "Samsung Galaxy Note 20",
                            Price = 23990000.0m
                        },
                        new
                        {
                            Id = 20,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/215773/huawei-p40-pro-600x600-3-400x400.jpg",
                            Name = "Huawei P40 Pro (Nền tảng Huawei Mobile Service)",
                            Price = 21990000.0m
                        },
                        new
                        {
                            Id = 21,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/214638/oneplus-8-pro-1-200x200.jpg",
                            Name = "OnePlus 8 Pro 5G",
                            Price = 22990000.0m
                        },
                        new
                        {
                            Id = 22,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/198150/oppo-find-x2-blue-600x600-400x400.jpg",
                            Name = "OPPO Find X2",
                            Price = 19990000.0m
                        },
                        new
                        {
                            Id = 23,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/210644/iphone-11-128gb-green-400x400.jpg",
                            Name = "iPhone 11 128GB",
                            Price = 21990000.0m
                        },
                        new
                        {
                            Id = 24,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/217935/samsung-galaxy-s20-600x600-hong-400x400.jpg",
                            Name = "Samsung Galaxy S20",
                            Price = 21490000.0m
                        },
                        new
                        {
                            Id = 25,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/223290/vivo-x50-pro-155920-035955-200x200.jpg",
                            Name = "Vivo X50 Pro",
                            Price = 18990000.0m
                        },
                        new
                        {
                            Id = 26,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/206176/samsung-galaxy-note-10-plus-171220-101247-400x400.jpg",
                            Name = "Samsung Galaxy Note 10+",
                            Price = 15990000.0m
                        },
                        new
                        {
                            Id = 27,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/190323/iphone-xs-gold-600x600-2-400x400.jpg",
                            Name = "iPhone Xs 64GB",
                            Price = 17990000.0m
                        },
                        new
                        {
                            Id = 28,
                            Image = "https://cdn.tgdd.vn/Products/Images/42/222631/iphone-se-256gb-2020-261920-101916-200x200.jpg",
                            Name = "iPhone SE 256GB (2020)",
                            Price = 17990000.0m
                        });
                });

            modelBuilder.Entity("PhoneStoreBackEnd.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
